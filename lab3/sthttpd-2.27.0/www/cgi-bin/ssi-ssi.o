	.file	"ssi.c"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"500 Internal Error"
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC1:
	.string	"<HTML><HEAD><TITLE>%s</TITLE></HEAD>\n<BODY><H2>%s</H2>\nSomething unusual went wrong during a server-side-includes request:\n<BLOCKQUOTE>\n%s\n</BLOCKQUOTE>\n</BODY></HTML>\n"
	.text
	.p2align 4,,15
	.type	internal_error, @function
internal_error:
.LFB2:
	.cfi_startproc
	movl	$.LC0, %edx
	movq	%rdi, %rcx
	xorl	%eax, %eax
	movq	%rdx, %rsi
	movl	$.LC1, %edi
	jmp	printf
	.cfi_endproc
.LFE2:
	.size	internal_error, .-internal_error
	.section	.rodata.str1.1
.LC2:
	.string	"Not Permitted"
	.section	.rodata.str1.8
	.align 8
.LC3:
	.string	"<HR><H2>%s</H2>\nThe filename requested in the %s %s=%s directive\nmay not be fetched.\n<HR>\n"
	.text
	.p2align 4,,15
	.type	not_permitted, @function
not_permitted:
.LFB5:
	.cfi_startproc
	movq	%rsi, %rcx
	movq	%rdx, %r8
	movl	$.LC2, %esi
	movq	%rdi, %rdx
	xorl	%eax, %eax
	movl	$.LC3, %edi
	jmp	printf
	.cfi_endproc
.LFE5:
	.size	not_permitted, .-not_permitted
	.section	.rodata.str1.1
.LC4:
	.string	"404 Not Found"
	.section	.rodata.str1.8
	.align 8
.LC5:
	.string	"<HTML><HEAD><TITLE>%s</TITLE></HEAD>\n<BODY><H2>%s</H2>\nThe requested server-side-includes filename, %s,\ndoes not seem to exist.\n</BODY></HTML>\n"
	.text
	.p2align 4,,15
	.type	not_found, @function
not_found:
.LFB3:
	.cfi_startproc
	movl	$.LC4, %edx
	movq	%rdi, %rcx
	xorl	%eax, %eax
	movq	%rdx, %rsi
	movl	$.LC5, %edi
	jmp	printf
	.cfi_endproc
.LFE3:
	.size	not_found, .-not_found
	.section	.rodata.str1.1
.LC6:
	.string	"Unknown Directive"
	.section	.rodata.str1.8
	.align 8
.LC7:
	.string	"<HR><H2>%s</H2>\nThe requested server-side-includes filename, %s,\ntried to use an unknown directive, %s.\n<HR>\n"
	.text
	.p2align 4,,15
	.type	unknown_directive, @function
unknown_directive:
.LFB6:
	.cfi_startproc
	movq	%rdi, %rdx
	movq	%rsi, %rcx
	movl	$.LC7, %edi
	movl	$.LC6, %esi
	xorl	%eax, %eax
	jmp	printf
	.cfi_endproc
.LFE6:
	.size	unknown_directive, .-unknown_directive
	.section	.rodata.str1.1
.LC8:
	.string	"Unknown Value"
	.section	.rodata.str1.8
	.align 8
.LC9:
	.string	"<HR><H2>%s</H2>\nThe requested server-side-includes filename, %s,\ntried to use the directive %s %s with an unknown value, %s.\n<HR>\n"
	.text
	.p2align 4,,15
	.type	unknown_value, @function
unknown_value:
.LFB8:
	.cfi_startproc
	movq	%rdx, %r8
	movq	%rcx, %r9
	movq	%rdi, %rdx
	movq	%rsi, %rcx
	movl	$.LC9, %edi
	movl	$.LC8, %esi
	xorl	%eax, %eax
	jmp	printf
	.cfi_endproc
.LFE8:
	.size	unknown_value, .-unknown_value
	.section	.rodata.str1.1
.LC10:
	.string	"Unknown Tag"
	.section	.rodata.str1.8
	.align 8
.LC11:
	.string	"<HR><H2>%s</H2>\nThe requested server-side-includes filename, %s,\ntried to use the directive %s with an unknown tag, %s.\n<HR>\n"
	.text
	.p2align 4,,15
	.type	unknown_tag, @function
unknown_tag:
.LFB7:
	.cfi_startproc
	movq	%rsi, %rcx
	movq	%rdx, %r8
	movl	$.LC10, %esi
	movq	%rdi, %rdx
	xorl	%eax, %eax
	movl	$.LC11, %edi
	jmp	printf
	.cfi_endproc
.LFE7:
	.size	unknown_tag, .-unknown_tag
	.section	.rodata.str1.1
.LC12:
	.string	"Not Found"
	.section	.rodata.str1.8
	.align 8
.LC13:
	.string	"<HR><H2>%s</H2>\nThe filename requested in a %s %s directive, %s,\ndoes not seem to exist.\n<HR>\n"
	.text
	.p2align 4,,15
	.type	not_found2, @function
not_found2:
.LFB4:
	.cfi_startproc
	movq	%rsi, %rcx
	movq	%rdx, %r8
	movl	$.LC12, %esi
	movq	%rdi, %rdx
	xorl	%eax, %eax
	movl	$.LC13, %edi
	jmp	printf
	.cfi_endproc
.LFE4:
	.size	not_found2, .-not_found2
	.section	.rodata.str1.1
.LC14:
	.string	"%ld"
.LC15:
	.string	"%ldM"
.LC16:
	.string	"%ldG"
	.text
	.p2align 4,,15
	.type	show_size, @function
show_size:
.LFB12:
	.cfi_startproc
	movl	sizefmt(%rip), %eax
	testl	%eax, %eax
	je	.L16
	cmpl	$1, %eax
	jne	.L17
	cmpq	$1023, %rdi
	jle	.L16
	cmpq	$1048575, %rdi
	jle	.L18
	movq	%rdi, %rsi
	xorl	%eax, %eax
	movl	$.LC16, %edi
	sarq	$30, %rsi
	jmp	printf
	.p2align 4,,10
	.p2align 3
.L17:
	rep ret
	.p2align 4,,10
	.p2align 3
.L16:
	movq	%rdi, %rsi
	xorl	%eax, %eax
	movl	$.LC14, %edi
	jmp	printf
	.p2align 4,,10
	.p2align 3
.L18:
	xorl	%esi, %esi
	movl	$.LC15, %edi
	xorl	%eax, %eax
	jmp	printf
	.cfi_endproc
.LFE12:
	.size	show_size, .-show_size
	.section	.rodata.str1.1
.LC17:
	.string	"CGI_PATTERN"
.LC18:
	.string	"../"
.LC19:
	.string	".htpasswd"
.LC20:
	.string	"%s/%s"
	.text
	.p2align 4,,15
	.type	check_filename, @function
check_filename:
.LFB10:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	movq	%rdi, %rbx
	subq	$152, %rsp
	.cfi_def_cfa_offset 192
	movl	inited.3207(%rip), %edx
	testl	%edx, %edx
	je	.L45
.L20:
	movl	$.LC18, %esi
	movq	%rbx, %rdi
	call	strstr
	testq	%rax, %rax
	je	.L21
.L44:
	xorl	%eax, %eax
.L19:
	addq	$152, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L21:
	.cfi_restore_state
	movq	%rbx, %rdi
	call	strlen
	movl	$.LC19, %edx
	movl	$10, %ecx
	movq	%rbx, %rsi
	movq	%rdx, %rdi
	repz cmpsb
	je	.L44
	cmpl	$9, %eax
	jbe	.L24
	cltq
	movl	$10, %ecx
	movq	%rdx, %rdi
	leaq	-9(%rbx,%rax), %rsi
	repz cmpsb
	jne	.L24
	cmpb	$47, -10(%rbx,%rax)
	je	.L44
.L24:
	movq	%rbx, %rdi
	call	strdup
	testq	%rax, %rax
	movq	%rax, %rbp
	je	.L44
	movl	$47, %esi
	movq	%rax, %rdi
	call	strrchr
	testq	%rax, %rax
	je	.L46
	movb	$0, (%rax)
.L26:
	movq	%rbp, %rdi
.L27:
	movl	(%rdi), %edx
	addq	$4, %rdi
	leal	-16843009(%rdx), %eax
	notl	%edx
	andl	%edx, %eax
	andl	$-2139062144, %eax
	je	.L27
	movl	%eax, %edx
	shrl	$16, %edx
	testl	$32896, %eax
	cmove	%edx, %eax
	leaq	2(%rdi), %rdx
	movl	%eax, %ecx
	cmove	%rdx, %rdi
	addb	%al, %cl
	sbbq	$3, %rdi
	subq	%rbp, %rdi
	addq	$11, %rdi
	call	malloc
	testq	%rax, %rax
	movq	%rax, %r12
	je	.L47
	movl	$.LC19, %ecx
	movq	%rbp, %rdx
	movq	%rax, %rdi
	movl	$.LC20, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rsp, %rsi
	movq	%r12, %rdi
	call	stat
	movq	%rbp, %rdi
	movl	%eax, %r13d
	call	free
	movq	%r12, %rdi
	call	free
	testl	%r13d, %r13d
	je	.L44
	movq	cgi_pattern.3208(%rip), %rdi
	movl	$1, %eax
	testq	%rdi, %rdi
	je	.L19
	movq	%rbx, %rsi
	call	match
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	jmp	.L19
	.p2align 4,,10
	.p2align 3
.L45:
	movl	$.LC17, %edi
	call	getenv
	movl	$1, inited.3207(%rip)
	movq	%rax, cgi_pattern.3208(%rip)
	jmp	.L20
	.p2align 4,,10
	.p2align 3
.L47:
	movq	%rbp, %rdi
	call	free
	jmp	.L44
	.p2align 4,,10
	.p2align 3
.L46:
	movl	$46, %eax
	movw	%ax, 0(%rbp)
	jmp	.L26
	.cfi_endproc
.LFE10:
	.size	check_filename, .-check_filename
	.p2align 4,,15
	.type	show_time, @function
show_time:
.LFB11:
	.cfi_startproc
	subq	$536, %rsp
	.cfi_def_cfa_offset 544
	testl	%esi, %esi
	movq	%rdi, 8(%rsp)
	leaq	8(%rsp), %rdi
	je	.L49
	call	gmtime
.L50:
	leaq	16(%rsp), %rdi
	movq	%rax, %rcx
	movl	$timefmt, %edx
	movl	$500, %esi
	call	strftime
	testq	%rax, %rax
	je	.L48
	movq	stdout(%rip), %rsi
	leaq	16(%rsp), %rdi
	call	fputs
.L48:
	addq	$536, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L49:
	.cfi_restore_state
	call	localtime
	jmp	.L50
	.cfi_endproc
.LFE11:
	.size	show_time, .-show_time
	.section	.rodata.str1.1
.LC21:
	.string	"var"
.LC22:
	.string	"DOCUMENT_NAME"
.LC23:
	.string	"DOCUMENT_URI"
.LC24:
	.string	"QUERY_STRING_UNESCAPED"
.LC25:
	.string	"QUERY_STRING"
.LC26:
	.string	"DATE_LOCAL"
.LC27:
	.string	"DATE_GMT"
.LC28:
	.string	"LAST_MODIFIED"
	.text
	.p2align 4,,15
	.type	do_echo, @function
do_echo:
.LFB15:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movq	%rdi, %r11
	movq	%rsi, %rbx
	movq	%rcx, %r10
	movl	$.LC21, %edi
	movl	$4, %ecx
	subq	$32, %rsp
	.cfi_def_cfa_offset 48
	movq	%r8, %rsi
	repz cmpsb
	jne	.L69
	movl	$.LC22, %edi
	movl	$14, %ecx
	movq	%r9, %rsi
	repz cmpsb
	je	.L70
	movl	$.LC23, %edi
	movl	$13, %ecx
	movq	%r9, %rsi
	repz cmpsb
	je	.L71
	movl	$.LC24, %edi
	movl	$23, %ecx
	movq	%r9, %rsi
	repz cmpsb
	je	.L72
	movl	$.LC26, %edi
	movl	$11, %ecx
	movq	%r9, %rsi
	repz cmpsb
	je	.L73
	movl	$.LC27, %edi
	movl	$9, %ecx
	movq	%r9, %rsi
	repz cmpsb
	je	.L74
	movl	$.LC28, %edi
	movl	$14, %ecx
	movq	%r9, %rsi
	repz cmpsb
	jne	.L65
	movq	%rdx, %rdi
	call	fileno
	movl	$sb, %esi
	movl	%eax, %edi
	call	fstat
	testl	%eax, %eax
	jns	.L75
.L56:
	addq	$32, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L70:
	.cfi_restore_state
	movq	stdout(%rip), %rsi
	addq	$32, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	movq	%rbx, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 8
	jmp	fputs
	.p2align 4,,10
	.p2align 3
.L69:
	.cfi_restore_state
	addq	$32, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	movq	%rbx, %rdi
	movq	%r8, %rdx
	popq	%rbx
	.cfi_def_cfa_offset 8
	movq	%r10, %rsi
	jmp	unknown_tag
	.p2align 4,,10
	.p2align 3
.L73:
	.cfi_restore_state
	xorl	%edi, %edi
	call	time
	addq	$32, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	xorl	%esi, %esi
	movq	%rax, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 8
	jmp	show_time
	.p2align 4,,10
	.p2align 3
.L71:
	.cfi_restore_state
	movq	stdout(%rip), %rsi
	addq	$32, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	movq	%r11, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 8
	jmp	fputs
	.p2align 4,,10
	.p2align 3
.L72:
	.cfi_restore_state
	movl	$.LC25, %edi
	call	getenv
	testq	%rax, %rax
	je	.L56
.L67:
	movq	stdout(%rip), %rsi
	addq	$32, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	movq	%rax, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 8
	jmp	fputs
	.p2align 4,,10
	.p2align 3
.L65:
	.cfi_restore_state
	movq	%r9, %rdi
	movq	%r8, 24(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r9, 8(%rsp)
	call	getenv
	testq	%rax, %rax
	movq	8(%rsp), %r9
	movq	16(%rsp), %r10
	movq	24(%rsp), %r8
	jne	.L67
	addq	$32, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	movq	%rbx, %rdi
	movq	%r9, %rcx
	popq	%rbx
	.cfi_def_cfa_offset 8
	movq	%r8, %rdx
	movq	%r10, %rsi
	jmp	unknown_value
	.p2align 4,,10
	.p2align 3
.L75:
	.cfi_restore_state
	movq	sb+88(%rip), %rdi
	addq	$32, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	xorl	%esi, %esi
	popq	%rbx
	.cfi_def_cfa_offset 8
	jmp	show_time
	.p2align 4,,10
	.p2align 3
.L74:
	.cfi_restore_state
	xorl	%edi, %edi
	call	time
	addq	$32, %rsp
	.cfi_def_cfa_offset 16
	movl	$1, %esi
	movq	%rax, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 8
	jmp	show_time
	.cfi_endproc
.LFE15:
	.size	do_echo, .-do_echo
	.section	.rodata.str1.1
.LC29:
	.string	"timefmt"
.LC30:
	.string	"sizefmt"
.LC31:
	.string	"bytes"
.LC32:
	.string	"abbrev"
	.text
	.p2align 4,,15
	.type	do_config.isra.0, @function
do_config.isra.0:
.LFB22:
	.cfi_startproc
	movq	%rdi, %r8
	movq	%rsi, %r9
	movq	%rcx, %rax
	movl	$.LC29, %edi
	movl	$8, %ecx
	movq	%rdx, %rsi
	repz cmpsb
	je	.L86
	movl	$.LC30, %edi
	movl	$8, %ecx
	movq	%rdx, %rsi
	repz cmpsb
	jne	.L79
	movl	$.LC31, %edi
	movl	$6, %ecx
	movq	%rax, %rsi
	repz cmpsb
	je	.L87
	movl	$.LC32, %edi
	movl	$7, %ecx
	movq	%rax, %rsi
	repz cmpsb
	jne	.L81
	movl	$1, sizefmt(%rip)
	ret
	.p2align 4,,10
	.p2align 3
.L79:
	movq	%r9, %rsi
	movq	%r8, %rdi
	jmp	unknown_tag
	.p2align 4,,10
	.p2align 3
.L86:
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movq	%rax, %rsi
	movl	$99, %edx
	movl	$timefmt, %edi
	call	strncpy
	movb	$0, timefmt+99(%rip)
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L87:
	movl	$0, sizefmt(%rip)
	ret
	.p2align 4,,10
	.p2align 3
.L81:
	movq	%rax, %rcx
	movq	%r9, %rsi
	movq	%r8, %rdi
	jmp	unknown_value
	.cfi_endproc
.LFE22:
	.size	do_config.isra.0, .-do_config.isra.0
	.section	.rodata.str1.1
.LC33:
	.string	"virtual"
.LC34:
	.string	"file"
	.text
	.p2align 4,,15
	.type	get_filename.constprop.4, @function
get_filename.constprop.4:
.LFB26:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movq	%rdi, %r15
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movq	%rsi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	%rcx, %r14
	movq	%r8, %rbp
	movq	%r9, %r13
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	movq	%rdx, 8(%rsp)
	call	strlen
	movq	%r12, %rdi
	movq	%rax, (%rsp)
	call	strlen
	movl	$.LC33, %edi
	movl	$8, %ecx
	movq	%r14, %rsi
	repz cmpsb
	movq	%rax, %rbx
	jne	.L89
	movl	$.LC18, %esi
	movq	%rbp, %rdi
	call	strstr
	testq	%rax, %rax
	jne	.L93
	movq	(%rsp), %rax
	cmpl	%ebx, %eax
	jg	.L98
	subl	%eax, %ebx
	movq	%r15, %rdi
	movslq	%ebx, %rbx
	leaq	(%r12,%rbx), %rsi
	call	strcmp
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L98
	movq	%rbp, %rdi
	call	strlen
	addq	%rbx, %rax
	cmpq	$999, %rax
	ja	.L98
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%rbx, %rdx
	call	strncpy
	leaq	0(%r13,%rbx), %rdi
	movq	%rbp, %rsi
	call	strcpy
.L88:
	addq	$24, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	movl	%r15d, %eax
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L89:
	.cfi_restore_state
	movl	$.LC34, %edi
	movl	$5, %ecx
	movq	%r14, %rsi
	repz cmpsb
	seta	%r15b
	setb	%al
	subl	%eax, %r15d
	movsbl	%r15b, %r15d
	testl	%r15d, %r15d
	jne	.L92
	cmpb	$47, 0(%rbp)
	je	.L93
	movl	$.LC18, %esi
	movq	%rbp, %rdi
	call	strstr
	testq	%rax, %rax
	jne	.L93
	movq	%rbp, %rdi
	call	strlen
	leal	1(%rbx), %edx
	movslq	%edx, %rdx
	addq	%rdx, %rax
	cmpq	$999, %rax
	ja	.L98
	leaq	1(%rbx), %rdx
	movq	%r12, %rsi
	movq	%r13, %rdi
	call	memcpy
	movl	$47, %esi
	movq	%r13, %rdi
	call	strrchr
	testq	%rax, %rax
	jne	.L94
	leaq	0(%r13,%rbx), %rax
	movb	$47, (%rax)
.L94:
	leaq	1(%rax), %rdi
	movq	%rbp, %rsi
	call	strcpy
	jmp	.L88
	.p2align 4,,10
	.p2align 3
.L98:
	movl	$-1, %r15d
	jmp	.L88
	.p2align 4,,10
	.p2align 3
.L93:
	movq	8(%rsp), %rdi
	movq	%rbp, %rdx
	movq	%r14, %rsi
	movl	$-1, %r15d
	call	not_permitted
	jmp	.L88
.L92:
	movq	8(%rsp), %rsi
	movq	%r14, %rdx
	movq	%r12, %rdi
	movl	$-1, %r15d
	call	unknown_tag
	jmp	.L88
	.cfi_endproc
.LFE26:
	.size	get_filename.constprop.4, .-get_filename.constprop.4
	.p2align 4,,15
	.type	do_flastmod.isra.2, @function
do_flastmod.isra.2:
.LFB24:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	movq	%rcx, %rbp
	movq	%rdx, %rbx
	subq	$1016, %rsp
	.cfi_def_cfa_offset 1040
	movq	%rsp, %r9
	call	get_filename.constprop.4
	testl	%eax, %eax
	jns	.L105
	addq	$1016, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L105:
	.cfi_restore_state
	movl	$sb, %esi
	movq	%rsp, %rdi
	call	stat
	testl	%eax, %eax
	js	.L106
	movq	sb+88(%rip), %rdi
	xorl	%esi, %esi
	call	show_time
	addq	$1016, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L106:
	.cfi_restore_state
	movq	%rsp, %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	not_found2
	addq	$1016, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE24:
	.size	do_flastmod.isra.2, .-do_flastmod.isra.2
	.p2align 4,,15
	.type	do_fsize.isra.1, @function
do_fsize.isra.1:
.LFB23:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	movq	%rcx, %rbp
	movq	%rdx, %rbx
	subq	$1016, %rsp
	.cfi_def_cfa_offset 1040
	movq	%rsp, %r9
	call	get_filename.constprop.4
	testl	%eax, %eax
	jns	.L112
	addq	$1016, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L112:
	.cfi_restore_state
	movl	$sb, %esi
	movq	%rsp, %rdi
	call	stat
	testl	%eax, %eax
	js	.L113
	movq	sb+48(%rip), %rdi
	call	show_size
	addq	$1016, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L113:
	.cfi_restore_state
	movq	%rsp, %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	not_found2
	addq	$1016, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE23:
	.size	do_fsize.isra.1, .-do_fsize.isra.1
	.section	.rodata.str1.1
.LC35:
	.string	""
.LC36:
	.string	" \t\n\r"
.LC37:
	.string	" \t\n\r\""
.LC38:
	.string	"config"
.LC39:
	.string	"include"
.LC40:
	.string	"echo"
.LC41:
	.string	"fsize"
.LC42:
	.string	"flastmod"
	.text
	.p2align 4,,15
	.type	parse, @function
parse:
.LFB18:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movq	%rsi, %r15
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movq	%rcx, %r13
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	$.LC36, %esi
	xorl	%ebx, %ebx
	subq	$1640, %rsp
	.cfi_def_cfa_offset 1696
	movq	%rdi, 8(%rsp)
	movq	%rcx, %rdi
	movq	%rdx, 24(%rsp)
	call	strspn
	addq	%rax, %r13
	movq	%r13, %rdi
.L115:
	movl	$.LC37, %esi
	call	strpbrk
	testq	%rax, %rax
	je	.L116
.L151:
	cmpb	$34, (%rax)
	leaq	1(%rax), %rbp
	je	.L150
.L117:
	movq	%rbp, %rdi
	movb	$0, (%rax)
	movl	$.LC36, %esi
	call	strspn
	leaq	0(%rbp,%rax), %rdi
	cmpb	$0, (%rdi)
	je	.L116
	cmpl	$199, %ebx
	jg	.L115
	movslq	%ebx, %rax
	movl	$.LC37, %esi
	addl	$1, %ebx
	movq	%rdi, 32(%rsp,%rax,8)
	call	strpbrk
	testq	%rax, %rax
	jne	.L151
	.p2align 4,,10
	.p2align 3
.L116:
	movl	$.LC38, %edi
	movl	$7, %ecx
	movq	%r13, %rsi
	repz cmpsb
	seta	%bpl
	setb	%al
	subl	%eax, %ebp
	movsbl	%bpl, %ebp
	testl	%ebp, %ebp
	je	.L119
	movl	$.LC39, %edi
	movl	$8, %ecx
	movq	%r13, %rsi
	repz cmpsb
	jne	.L152
	movl	$1, %ebp
.L119:
	testl	%ebx, %ebx
	je	.L114
	leal	-1(%rbx), %r14d
	movl	$1, %ebx
	addq	$1, %r14
	jmp	.L121
	.p2align 4,,10
	.p2align 3
.L127:
	cmpl	$3, %ebp
	je	.L129
	cmpl	$4, %ebp
	jne	.L125
	movq	8(%rsp), %rdi
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r15, %rsi
	call	do_flastmod.isra.2
.L131:
	cmpq	%r14, %rbx
	je	.L114
.L132:
	testl	%ebx, %ebx
	je	.L123
	movl	$32, %edi
	call	putchar
.L123:
	addq	$1, %rbx
.L121:
	movq	24(%rsp,%rbx,8), %r12
	movl	$61, %esi
	movq	%r12, %rdi
	call	strchr
	testq	%rax, %rax
	movl	$.LC35, %r8d
	je	.L124
	cmpb	$34, 1(%rax)
	leaq	1(%rax), %r8
	movb	$0, (%rax)
	movq	%rax, (%rsp)
	jne	.L124
	movq	%r8, %rdi
	movq	%r8, 16(%rsp)
	call	strlen
	movq	(%rsp), %rdx
	movq	16(%rsp), %r8
	addq	%rdx, %rax
	cmpb	$34, (%rax)
	jne	.L124
	leaq	2(%rdx), %r8
	movb	$0, (%rax)
	.p2align 4,,10
	.p2align 3
.L124:
	cmpl	$2, %ebp
	je	.L126
	jg	.L127
	cmpl	$1, %ebp
	jne	.L125
	movq	8(%rsp), %rdi
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r15, %rsi
	call	do_include.isra.3
	cmpq	%r14, %rbx
	jne	.L132
.L114:
	addq	$1640, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L150:
	.cfi_restore_state
	movq	%rbp, %rdi
	movl	$34, %esi
	call	strchr
	movq	%rax, %rbp
	leaq	1(%rax), %rax
	cmpb	$0, 1(%rbp)
	je	.L116
	addq	$2, %rbp
	jmp	.L117
	.p2align 4,,10
	.p2align 3
.L126:
	movq	24(%rsp), %rdx
	movq	8(%rsp), %rdi
	movq	%r8, %r9
	movq	%r13, %rcx
	movq	%r12, %r8
	movq	%r15, %rsi
	call	do_echo
	jmp	.L131
	.p2align 4,,10
	.p2align 3
.L125:
	movq	%r8, %rcx
	movq	%r12, %rdx
	movq	%r13, %rsi
	movq	%r15, %rdi
	call	do_config.isra.0
	jmp	.L131
	.p2align 4,,10
	.p2align 3
.L129:
	movq	8(%rsp), %rdi
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r15, %rsi
	call	do_fsize.isra.1
	jmp	.L131
	.p2align 4,,10
	.p2align 3
.L152:
	movl	$.LC40, %edi
	movl	$5, %ecx
	movq	%r13, %rsi
	repz cmpsb
	je	.L134
	movl	$.LC41, %edi
	movl	$6, %ecx
	movq	%r13, %rsi
	repz cmpsb
	je	.L135
	movl	$.LC42, %edi
	movl	$9, %ecx
	movq	%r13, %rsi
	repz cmpsb
	movl	$4, %ebp
	seta	%dl
	setb	%al
	cmpb	%al, %dl
	je	.L119
	addq	$1640, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	movq	%r13, %rsi
	movq	%r15, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	unknown_directive
	.p2align 4,,10
	.p2align 3
.L134:
	.cfi_restore_state
	movl	$2, %ebp
	jmp	.L119
.L135:
	movl	$3, %ebp
	jmp	.L119
	.cfi_endproc
.LFE18:
	.size	parse, .-parse
	.p2align 4,,15
	.type	slurp, @function
slurp:
.LFB19:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	xorl	%r14d, %r14d
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	movq	%rdi, %r12
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	movq	%rsi, %r13
	movq	%rdx, %rbx
	xorl	%ebp, %ebp
	subq	$1008, %rsp
	.cfi_def_cfa_offset 1056
.L154:
	movq	%rbx, %rdi
	call	_IO_getc
	cmpl	$-1, %eax
	je	.L153
.L176:
	cmpl	$3, %ebp
	je	.L156
	cmpl	$4, %ebp
	je	.L171
	testl	%ebp, %ebp
	je	.L182
	cmpl	$998, %r14d
	movslq	%r14d, %rdx
	jg	.L154
.L170:
	movq	%rbx, %rdi
	addl	$1, %r14d
	movb	%al, (%rsp,%rdx)
	call	_IO_getc
	cmpl	$-1, %eax
	jne	.L176
.L153:
	addq	$1008, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L206:
	.cfi_restore_state
	cmpl	$998, %r14d
	jg	.L200
	leal	1(%r14), %ebp
	movq	%rbx, %rdi
	movslq	%r14d, %r14
	movb	$45, (%rsp,%r14)
	call	_IO_getc
	cmpl	$-1, %eax
	je	.L153
	movl	%ebp, %r14d
.L171:
	cmpl	$62, %eax
	je	.L204
.L166:
	cmpl	$45, %eax
	je	.L167
	cmpl	$998, %r14d
	jg	.L202
.L169:
	leal	1(%r14), %ebp
	movq	%rbx, %rdi
	movslq	%r14d, %r14
	movb	%al, (%rsp,%r14)
	call	_IO_getc
	cmpl	$-1, %eax
	je	.L153
.L174:
	cmpl	$45, %eax
	je	.L205
.L159:
	cmpl	$998, %ebp
	jg	.L172
	leal	1(%rbp), %r14d
	movslq	%ebp, %rbp
	movb	%al, (%rsp,%rbp)
.L202:
	movq	%rbx, %rdi
	call	_IO_getc
	cmpl	$-1, %eax
	je	.L153
.L182:
	cmpl	$45, %eax
	movl	%r14d, %ebp
	jne	.L159
.L205:
	cmpl	$998, %ebp
	jle	.L160
	movq	%rbx, %rdi
	call	_IO_getc
	cmpl	$-1, %eax
	je	.L153
	cmpl	$45, %eax
	jne	.L172
	movl	%ebp, %r14d
	.p2align 4,,10
	.p2align 3
.L200:
	movq	%rbx, %rdi
	call	_IO_getc
	cmpl	$-1, %eax
	je	.L153
	cmpl	$62, %eax
	jne	.L166
.L204:
	subl	$2, %r14d
	movq	%rsp, %rcx
	movq	%rbx, %rdx
	movslq	%r14d, %r14
	movq	%r13, %rsi
	movq	%r12, %rdi
	movb	$0, (%rsp,%r14)
	call	parse
	addq	$1008, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L160:
	.cfi_restore_state
	leal	1(%rbp), %r14d
	movq	%rbx, %rdi
	movslq	%ebp, %rbp
	movb	$45, (%rsp,%rbp)
	call	_IO_getc
	cmpl	$-1, %eax
	je	.L153
.L156:
	cmpl	$45, %eax
	je	.L206
	cmpl	$998, %r14d
	movl	%r14d, %ebp
	jle	.L169
.L172:
	movq	%rbx, %rdi
	call	_IO_getc
	cmpl	$-1, %eax
	jne	.L174
	addq	$1008, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L167:
	.cfi_restore_state
	cmpl	$998, %r14d
	jg	.L200
	movslq	%r14d, %rdx
	movl	$45, %eax
	movl	$4, %ebp
	jmp	.L170
	.cfi_endproc
.LFE19:
	.size	slurp, .-slurp
	.section	.rodata.str1.1
.LC43:
	.string	"<!"
.LC44:
	.string	"<!-"
.LC45:
	.string	"<!--"
	.text
	.p2align 4,,15
	.type	read_file, @function
read_file:
.LFB20:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movq	%rdi, %r13
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	movq	%rsi, %r12
	movq	%rdx, %rbx
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	jmp	.L208
	.p2align 4,,10
	.p2align 3
.L213:
	cmpl	$60, %eax
	je	.L234
	movsbl	%al, %edi
.L233:
	call	putchar
.L208:
	movq	%rbx, %rdi
	call	_IO_getc
	cmpl	$-1, %eax
	jne	.L213
.L207:
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L234:
	.cfi_restore_state
	movq	%rbx, %rdi
	call	_IO_getc
	cmpl	$-1, %eax
	movl	%eax, %ebp
	je	.L207
	cmpl	$33, %eax
	je	.L235
	movl	$60, %edi
	call	putchar
.L229:
	movsbl	%bpl, %edi
	jmp	.L233
	.p2align 4,,10
	.p2align 3
.L235:
	movq	%rbx, %rdi
	call	_IO_getc
	cmpl	$-1, %eax
	movl	%eax, %ebp
	je	.L207
	cmpl	$45, %eax
	je	.L236
	movq	stdout(%rip), %rcx
	movl	$2, %edx
	movl	$1, %esi
	movl	$.LC43, %edi
.L230:
	call	fwrite
	jmp	.L229
	.p2align 4,,10
	.p2align 3
.L236:
	movq	%rbx, %rdi
	call	_IO_getc
	cmpl	$-1, %eax
	movl	%eax, %ebp
	je	.L207
	cmpl	$45, %eax
	je	.L237
	movq	stdout(%rip), %rcx
	movl	$3, %edx
	movl	$1, %esi
	movl	$.LC44, %edi
	jmp	.L230
	.p2align 4,,10
	.p2align 3
.L237:
	movq	%rbx, %rdi
	call	_IO_getc
	cmpl	$-1, %eax
	movl	%eax, %ebp
	je	.L207
	cmpl	$35, %eax
	je	.L238
	movq	stdout(%rip), %rcx
	movl	$4, %edx
	movl	$1, %esi
	movl	$.LC45, %edi
	jmp	.L230
	.p2align 4,,10
	.p2align 3
.L238:
	movq	%rbx, %rdx
	movq	%r12, %rsi
	movq	%r13, %rdi
	call	slurp
	movq	%rbx, %rdi
	call	_IO_getc
	cmpl	$-1, %eax
	jne	.L213
	jmp	.L207
	.cfi_endproc
.LFE20:
	.size	read_file, .-read_file
	.section	.rodata.str1.1
.LC46:
	.string	"r"
	.text
	.p2align 4,,15
	.type	do_include.isra.3, @function
do_include.isra.3:
.LFB25:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movq	%rdi, %r13
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movq	%r8, %rbp
	subq	$2024, %rsp
	.cfi_def_cfa_offset 2080
	leaq	1008(%rsp), %r9
	call	get_filename.constprop.4
	testl	%eax, %eax
	jns	.L262
.L239:
	addq	$2024, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L262:
	.cfi_restore_state
	leaq	1008(%rsp), %rdi
	call	check_filename
	testl	%eax, %eax
	jne	.L241
	leaq	1008(%rsp), %rdx
	movq	%rbx, %rsi
	movq	%r12, %rdi
	call	not_permitted
	jmp	.L239
	.p2align 4,,10
	.p2align 3
.L241:
	leaq	1008(%rsp), %rdi
	movl	$.LC46, %esi
	call	fopen
	testq	%rax, %rax
	movq	%rax, %r14
	je	.L263
	movq	%rbx, %rsi
	movl	$.LC33, %edi
	movl	$8, %ecx
	repz cmpsb
	movq	%rbp, %rdi
	seta	%bl
	setb	%al
	subl	%eax, %ebx
	movsbl	%bl, %ebx
	call	strlen
	testl	%ebx, %ebx
	movq	%rax, %r12
	jne	.L243
	cmpq	$999, %rax
	ja	.L244
	addq	$1, %r12
	movq	%rsp, %rbx
	cmpl	$8, %r12d
	movq	%rbx, %rdi
	jb	.L245
	movl	%r12d, %ecx
	movq	%rbp, %rsi
	shrl	$3, %ecx
	rep movsq
	movq	%rsi, %rbp
.L245:
	xorl	%eax, %eax
	testb	$4, %r12b
	je	.L246
	movl	0(%rbp), %eax
	movl	%eax, (%rdi)
	movl	$4, %eax
.L246:
	testb	$2, %r12b
	je	.L247
	movzwl	0(%rbp,%rax), %edx
	movw	%dx, (%rdi,%rax)
	addq	$2, %rax
.L247:
	andl	$1, %r12d
	je	.L249
	movzbl	0(%rbp,%rax), %edx
	movb	%dl, (%rdi,%rax)
	jmp	.L249
	.p2align 4,,10
	.p2align 3
.L243:
	addq	$1, %r12
	movq	%r13, %rdi
	call	strlen
	movq	%rax, %r15
	leaq	(%r12,%rax), %rax
	cmpq	$999, %rax
	jbe	.L264
.L244:
	movq	%rsp, %rbx
	leaq	1008(%rsp), %rsi
	movq	%rbx, %rdi
	call	strcpy
.L249:
	leaq	1008(%rsp), %rsi
	movq	%rbx, %rdi
	movq	%r14, %rdx
	call	read_file
	movq	%r14, %rdi
	call	fclose
	jmp	.L239
	.p2align 4,,10
	.p2align 3
.L264:
	movq	%rsp, %rbx
	leaq	1(%r15), %rdx
	movq	%r13, %rsi
	movq	%rbx, %rdi
	call	memcpy
	movl	$47, %esi
	movq	%rbx, %rdi
	call	strrchr
	testq	%rax, %rax
	je	.L265
.L250:
	leaq	1(%rax), %rdi
	movq	%r12, %rdx
	movq	%rbp, %rsi
	call	memcpy
	jmp	.L249
	.p2align 4,,10
	.p2align 3
.L263:
	leaq	1008(%rsp), %rdx
	movq	%rbx, %rsi
	movq	%r12, %rdi
	call	not_found2
	jmp	.L239
	.p2align 4,,10
	.p2align 3
.L265:
	leaq	(%rbx,%r15), %rax
	movb	$47, (%rsp,%r15)
	jmp	.L250
	.cfi_endproc
.LFE25:
	.size	do_include.isra.3, .-do_include.isra.3
	.section	.rodata.str1.1
.LC47:
	.string	"Content-type: text/html\n\n"
.LC48:
	.string	"SCRIPT_NAME"
	.section	.rodata.str1.8
	.align 8
.LC49:
	.string	"Couldn't get SCRIPT_NAME environment variable."
	.section	.rodata.str1.1
.LC50:
	.string	"PATH_INFO"
.LC51:
	.string	"Out of memory."
.LC52:
	.string	"%s%s"
.LC53:
	.string	"PATH_TRANSLATED"
	.section	.rodata.str1.8
	.align 8
.LC54:
	.string	"Couldn't get PATH_TRANSLATED environment variable."
	.section	.rodata.str1.1
.LC55:
	.string	"initial"
	.section	.text.startup,"ax",@progbits
	.p2align 4,,15
	.globl	main
	.type	main, @function
main:
.LFB21:
	.cfi_startproc
	movq	stdout(%rip), %rcx
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movl	$89, %eax
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	movl	$25, %edx
	movdqa	.LC56(%rip), %xmm0
	movl	$1, %esi
	movl	$.LC47, %edi
	movw	%ax, timefmt+16(%rip)
	movl	$0, sizefmt(%rip)
	movaps	%xmm0, timefmt(%rip)
	call	fwrite
	movl	$.LC48, %edi
	call	getenv
	testq	%rax, %rax
	je	.L274
	movl	$.LC50, %edi
	movq	%rax, %rbp
	call	getenv
	testq	%rax, %rax
	movq	%rax, %rbx
	movl	$.LC35, %eax
	cmove	%rax, %rbx
	movq	%rbp, %rdi
	call	strlen
	movq	%rbx, %rdi
	movq	%rax, %r12
	call	strlen
	leaq	1(%r12,%rax), %rdi
	call	malloc
	testq	%rax, %rax
	je	.L275
	movq	%rbp, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rcx
	movl	$.LC52, %esi
	xorl	%eax, %eax
	call	sprintf
	movl	$.LC53, %edi
	call	getenv
	testq	%rax, %rax
	movq	%rax, %rbp
	je	.L276
	movq	%rax, %rdi
	call	check_filename
	testl	%eax, %eax
	je	.L277
	movl	$.LC46, %esi
	movq	%rbp, %rdi
	call	fopen
	testq	%rax, %rax
	movq	%rax, %r12
	je	.L278
	movq	%rax, %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	read_file
	movq	%r12, %rdi
	call	fclose
	xorl	%edi, %edi
	call	exit
.L275:
	movl	$.LC51, %edi
	call	internal_error
	movl	$1, %edi
	call	exit
.L274:
	movl	$.LC49, %edi
	call	internal_error
	movl	$1, %edi
	call	exit
.L277:
	movl	$.LC55, %edi
	movq	%rbp, %rdx
	movl	$.LC53, %esi
	call	not_permitted
	movl	$1, %edi
	call	exit
.L276:
	movl	$.LC54, %edi
	call	internal_error
	movl	$1, %edi
	call	exit
.L278:
	movq	%rbp, %rdi
	call	not_found
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE21:
	.size	main, .-main
	.local	cgi_pattern.3208
	.comm	cgi_pattern.3208,8,8
	.local	inited.3207
	.comm	inited.3207,4,4
	.local	sb
	.comm	sb,144,32
	.local	sizefmt
	.comm	sizefmt,4,4
	.local	timefmt
	.comm	timefmt,100,32
	.section	.rodata.cst16,"aM",@progbits,16
	.align 16
.LC56:
	.quad	7288267177870778661
	.quad	2675237294160749856
	.ident	"GCC: (GNU) 7.2.0"
	.section	.note.GNU-stack,"",@progbits
